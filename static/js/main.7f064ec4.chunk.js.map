{"version":3,"sources":["components/FormSaving.js","components/Panels.js","components/Counters.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["FormSaving","state","aim","price","handleInput","e","value","target","type","name","_this","setState","Object","defineProperty","_this2","this","_this$state","react_default","a","createElement","className","onChange","required","min","onClick","preventDefault","props","saveInformation","Component","Panels","_ref","length","Counters","howPayed","remains","justPaidMoney","handlePay","handleCounter","console","log","prev","remainsFromParent","Footer","App","handleSaveInformation","Number","alert","components_FormSaving","components_Panels","components_Counters","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f064ec4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass FormSaving extends Component {\r\n  state = { \r\n    aim : \"\",\r\n    price: \"\",\r\n   }\r\n\r\n   handleInput = (e) =>{\r\n    const value = e.target.value;  \r\n    const type = e.target.type;\r\n    const name = e.target.name;\r\n\r\n    if(type === \"text\" || type === \"number\"){\r\n        this.setState({\r\n          [name]: value,\r\n        })\r\n    }\r\n\r\n   }\r\n\r\n  render() { \r\n    const {aim, price} = this.state;\r\n    return ( \r\n      <div className=\"headerForm\">\r\n        <h1 className=\"headerForm__slogan\">Welcome in savings application!</h1>\r\n        <form className=\"form\">\r\n          <label className=\"form__label\"> Please, write what's your aim:\r\n          <input className=\"form__label__aim\" type=\"text\" value={this.state.aim} onChange={this.handleInput} name=\"aim\" required/> </label>\r\n           <br />\r\n          <label className=\"form__label\">and how much it costs: \r\n           <input className=\"form__label__price\" type=\"number\" value={this.state.price} onChange={this.handleInput} name=\"price\" min=\"1\" required/> $ </label> \r\n           <br />\r\n           <button className=\"form__button\" type=\"submit\" onClick={(e)=> {\r\n             e.preventDefault();\r\n             this.props.saveInformation(aim, price)\r\n           }}>Let's go!</button>\r\n        </form>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default FormSaving;","import React from 'react';\r\n\r\n\r\n\r\nconst Panels = ({aim, price}) => {\r\n  return ( \r\n    <div className=\"panelsInfo\">\r\n      {aim.length > 0 ? <div className=\"panelsInfo__panel\">\r\n        <span > You want: {aim}</span> \r\n        <span> It costs: {price} $</span>\r\n      </div> : \"\"}\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Panels;","import React, { Component } from 'react';\r\n\r\n\r\nclass Counters extends Component{\r\n  \r\n    state = {\r\n    howPayed: 0,\r\n    remains: 0,\r\n    justPaidMoney:0\r\n  }\r\n\r\n  handlePay = e => {\r\n    this.setState({\r\n      justPaidMoney: e.target.value * 1,\r\n      remains: this.props.price,\r\n    })\r\n   \r\n  }\r\n\r\n  handleCounter = e => {\r\n    e.preventDefault();\r\n    if(this.state.justPaidMoney > this.state.remains || this.state.remains <= 0){\r\n      return console.log('Przykor nam...');\r\n    } else {\r\n    this.setState(prev => ({\r\n      howPayed: prev.howPayed + prev.justPaidMoney,\r\n      remains: prev.remains - prev.justPaidMoney,\r\n    }))\r\n    }\r\n  }\r\n  \r\n\r\n  render(){\r\n    const remainsFromParent = this.props.price;\r\n   \r\n    return ( \r\n      <div className=\"counters\">\r\n        <div className=\"panelsCounters\">\r\n        <div className=\"panelsCounters__panel\">\r\n         <h4> Saved money: </h4>\r\n         {this.state.howPayed} $\r\n        </div>\r\n        <div className=\"panelsCounters__panel\">\r\n          <h4>It remains to the end: </h4>\r\n          {this.state.remains === 0 ? remainsFromParent : this.state.remains} $\r\n        </div>\r\n        </div>\r\n        <div className=\"counters__form\">\r\n        <input className=\"counters__form__input\" type=\"number\" value={this.state.justPaidMoney} onChange={this.handlePay} min=\"1\" /> $\r\n        <button className=\"counters__form__button\"onClick={this.handleCounter}>Save</button>\r\n        </div>\r\n      </div>\r\n    );\r\n    }\r\n  }\r\n \r\nexport default Counters;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return ( \r\n    <div className=\"footer\">\r\n      <h3>FOOTER, INFORMATION ABOUT CREATOR</h3>\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Footer;","import React, { Component } from 'react';\nimport FormSaving from './FormSaving';\nimport Panels from './Panels';\nimport Counters from './Counters';\nimport Footer from './Footer';\nimport './css/App.css'\n\nclass App extends Component {\n  state = { \n    aim: \"\",\n    price: 0,\n   }\n\n  handleSaveInformation = (aim, price) =>{\n    // console.log(typeof Number(price)) ;\n    if(aim.length > 2 || Number(price) > 1) {\n     this.setState({\n      aim,\n      price,\n    })\n    } else {\n      alert(\"Za krótka nazwa celu (min.2 znaki) lub za mała kwota (min.1)!\")\n    }\n\n  }\n\n \n  render() { \n       return ( \n      <div className=\"App\">\n          <FormSaving saveInformation={this.handleSaveInformation} />\n          <Panels aim={this.state.aim} price={this.state.price} />\n          <Counters price={this.state.price} />\n          <Footer />\n      </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}